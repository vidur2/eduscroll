// QueryCacheAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class QueryCacheAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryCacheAddCreate(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        queryCacheAddCreateWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /query_cache/add
     -

     - BASIC:
       - type: http
       - name: Basic

     - returns: RequestBuilder<Void>
     */
    open class func queryCacheAddCreateWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/query_cache/add"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryCacheAddList(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        queryCacheAddListWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /query_cache/add
     -

     - BASIC:
       - type: http
       - name: Basic

     - returns: RequestBuilder<Void>
     */
    open class func queryCacheAddListWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/query_cache/add"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryCacheGetReccomendationCreate(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        queryCacheGetReccomendationCreateWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /query_cache/get_reccomendation
     -

     - BASIC:
       - type: http
       - name: Basic

     - returns: RequestBuilder<Void>
     */
    open class func queryCacheGetReccomendationCreateWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/query_cache/get_reccomendation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryCacheGetReccomendationList(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        queryCacheGetReccomendationListWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /query_cache/get_reccomendation
     -

     - BASIC:
       - type: http
       - name: Basic

     - returns: RequestBuilder<Void>
     */
    open class func queryCacheGetReccomendationListWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/query_cache/get_reccomendation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryCacheSearchCreate(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        queryCacheSearchCreateWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /query_cache/search
     -

     - BASIC:
       - type: http
       - name: Basic

     - returns: RequestBuilder<Void>
     */
    open class func queryCacheSearchCreateWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/query_cache/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryCacheSearchList(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        queryCacheSearchListWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /query_cache/search
     -

     - BASIC:
       - type: http
       - name: Basic

     - returns: RequestBuilder<Void>
     */
    open class func queryCacheSearchListWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/query_cache/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter uuid: (path)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryCacheStatusAddRead(uuid: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        queryCacheStatusAddReadWithRequestBuilder(uuid: uuid).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /query_cache/status/add/{uuid}
     -

     - BASIC:
       - type: http
       - name: Basic
     - parameter uuid: (path)

     - returns: RequestBuilder<Void>
     */
    open class func queryCacheStatusAddReadWithRequestBuilder(uuid: String) -> RequestBuilder<Void> {
        var path = "/query_cache/status/add/{uuid}"
        let uuidPreEscape = "\(uuid)"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter uuid: (path)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryCacheStatusGetRead(uuid: String, completion: @escaping ((_ data: [String: Any]?,_ error: Error?) -> Void)) {
        queryCacheStatusGetReadWithRequestBuilder(uuid: uuid).execute { response, error in
            completion(response?.body, error)
        }
    }


    /**
     - GET /query_cache/status/get/{uuid}
     -

     - BASIC:
       - type: http
       - name: Basic
     - parameter uuid: (path)

     - returns: RequestBuilder<Void>
     */
    open class func queryCacheStatusGetReadWithRequestBuilder(uuid: String) -> RequestBuilder<[String: Any]> {
        var path = "/query_cache/status/get/{uuid}"
        let uuidPreEscape = "\(uuid)"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[String: Any]>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
