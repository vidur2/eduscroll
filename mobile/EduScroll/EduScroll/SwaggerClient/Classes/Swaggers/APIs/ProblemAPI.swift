//
// ProblemAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ProblemAPI {
    /**

     - parameter subject: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func problemRead(subject: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        problemReadWithRequestBuilder(subject: subject).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /problem/{subject}
     - 

     - BASIC:
       - type: http
       - name: Basic
     - parameter subject: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func problemReadWithRequestBuilder(subject: String) -> RequestBuilder<Void> {
        var path = "/problem/{subject}"
        let subjectPreEscape = "\(subject)"
        let subjectPostEscape = subjectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subject}", with: subjectPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
